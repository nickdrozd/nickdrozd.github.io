#+options: ':nil *:t -:t ::t <:t H:3 \n:nil ^:t arch:headline
#+options: author:t broken-links:nil c:nil creator:nil
#+options: d:(not "LOGBOOK") date:t e:t email:nil f:t inline:t num:t
#+options: p:nil pri:nil prop:nil stat:t tags:t tasks:t tex:t
#+options: timestamp:t title:t toc:nil todo:t |:t
#+title: How to Print-Debug Python Comprehensions
#+date: <2023-03-02 Thu>
#+author: Nick Drozd
#+email: nick@thinker
#+language: en
#+select_tags: export
#+exclude_tags: noexport
#+creator: Emacs 30.0.50 (Org mode 9.5.5)
#+cite_export:
#+jekyll_layout: post
#+jekyll_categories:
#+jekyll_tags:

*Comprehensions* are a fantastic language feature in Python. They are an elegant alternative to manually constructing and populating data structures. Comprehensions are *declarative* -- they just say what they are, as opposed to the implicit logic of manual looping. When it comes to simple object creation, *comprehension should be used whenever possible*. This goes not just for lists, but also for dictionaries and sets.

However, a widely perceived *drawback* to comprehensions is that they are *harder to debug*. When something goes wrong with a manual loop, the first thing to do is to print out the iterated values as they turn up. But the values of a list comprehension can't be accessed, so *print-debugging* isn't possible. To deal with this, it's common to *unravel the comprehension* into a manual loop. Manual loops are uglier and more complicated and more error-prone than comprehensions, but that's the price that must be paid for *debuggability*.

That's the perception at least, but it's wrong. In fact, *print-debugging comprehensions is easy*. The key fact to understand is that *=print= is a function, and it can occur anywhere that a function can occur*. In particular, =print= can occur in a *comprehension filter*.

As an example, here's some code that deals with graphs:

#+begin_src python
Node = int
Graph = dict[Node, tuple[Node | None, ...]]

def exit_points(graph: Graph) -> dict[Node, set[Node]]:
    return {
        node: set(
            conn
            for conn in connections
            if conn is not None
        )
        for node, connections in graph.items()
    }
#+end_src

Notice the *nested comprehensions*: the dictionary comprehension contains set comprehensions as its values. Unraveling this into a manual loop would be *just awful*, but perhaps necessary to print the values as they show up:

#+begin_src python
def exit_points_unraveled(graph: Graph) -> dict[Node, set[Node]]:
    ret = {}

    for node, connections in graph.items():
        print(f'{node=}: {connections=}')  # <-- print values

        val = set()

        for conn in connections:
            if conn is not None:
                print(f'{conn=}')  # <-- print values
                val.add(conn)

        ret[node] = val

    return ret
#+end_src

(As a side note, statements like =ret = {}= are a *code smell* and often an indication that a comprehension could be used instead.)

Rather than go through the hassle of unraveling the comprehensions, we can simply print the values as part of the comprehension filter. The =print= function always returns =None=, so it's just a matter of creating a *vacuously true filter* that touches every iterated value but doesn't discard any of them:

#+begin_src python
def exit_points(graph: Graph) -> dict[Node, set[Node]]:
    return {
        node: set(
            conn
            for conn in connections
            if conn is not None and print(f'{conn=}') is None  # extra condition is vacuously true
        )
        for node, connections in graph.items()
        if print(f'{node=}: {connections=}') is None  # vacuously true
    }
#+end_src

*It isn't pretty. But then again, neither is print-debugging.*

This technique can be used in other places where debugging might be considered difficult, like in a *chain of boolean checks*:

#+begin_src python
for item in sequence:
    if (test_condition_1(item)
            or test_condition_2(item)
            or test_condition_3(item)):
        return None

    do_stuff(item)
#+end_src

It might happen that all the items in the sequence are failing the test conditions, and so none of them make it to =do_stuff=. To see where they are being caught, =print= calls can be added *between the conditions*:

#+begin_src python
for item in sequence:
    if (test_condition_1(item)
            or print('passed check 1')  # vacuously false
            or test_condition_2(item)
            or print('passed check 2')  # vacuously false
            or test_condition_3(item)):
        return None

    do_stuff(item)
#+end_src

(Note that this example uses an =or=-chain, and so the dummy =print= conditions need to be *vacuously false* rather than true.)

Again, this technique is possible because =print= is a function. In older versions of Python, =print= was a *statement*. That was a bad idea, and fortunately it was rectified. In general, statements are clunkier and less flexible than values. Python continues to improve with the addition of *value-oriented* language features like the *[[https://nickdrozd.github.io/2022/12/14/walrus-while.html][walrus operator]]*.
